# Google Cloud Build configuration for Journai Travel App
steps:
  # Setup Node.js environment
  - name: 'node:18'
    entrypoint: 'node'
    args: ['--version']

  # Install dependencies
  - name: 'node:18'
    entrypoint: 'npm'
    args: ['ci', '--only=production']

  # Install dev dependencies for build
  - name: 'node:18'
    entrypoint: 'npm'
    args: ['install', '--only=dev']

  # Run tests (optional)
  - name: 'node:18'
    entrypoint: 'bash'
    args: ['-c', 'npm test || echo "No tests found"']
    env:
      - 'GCP_PROJECT_ID=$PROJECT_ID'

  # Setup database and secrets
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get secrets from Secret Manager
        export VITE_SUPABASE_URL=$(gcloud secrets versions access latest --secret="supabase-url" || echo "$_SUPABASE_URL")
        export VITE_SUPABASE_ANON_KEY=$(gcloud secrets versions access latest --secret="supabase-anon-key" || echo "$_SUPABASE_ANON_KEY")
        export VITE_ADMIN_EMAILS=$(gcloud secrets versions access latest --secret="admin-emails" || echo "$_ADMIN_EMAILS")
        
        # Setup database if needed
        if [ -f "scripts/gcp-setup.js" ]; then
          node scripts/gcp-setup.js --database-only || echo "Database setup skipped"
        fi
    env:
      - 'GCP_PROJECT_ID=$PROJECT_ID'

  # Build the application
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Set build environment variables
        export VITE_SUPABASE_URL=$(gcloud secrets versions access latest --secret="supabase-url" || echo "$_SUPABASE_URL")
        export VITE_SUPABASE_ANON_KEY=$(gcloud secrets versions access latest --secret="supabase-anon-key" || echo "$_SUPABASE_ANON_KEY")
        export VITE_ADMIN_ENABLED=false
        export VITE_ADMIN_DEBUG=false
        export VITE_ADMIN_EMAILS=$(gcloud secrets versions access latest --secret="admin-emails" || echo "$_ADMIN_EMAILS")
        
        # Build the application
        npm run build
        
        # Verify build output
        ls -la dist/
    env:
      - 'NODE_ENV=production'

  # Security scan (optional)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running security checks..."
        # Add security scanning tools here if needed
        echo "Security checks completed"

  # Pre-deployment health check
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Verify critical files exist
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå Build failed: index.html not found"
          exit 1
        fi
        
        if [ ! -f "app.yaml" ]; then
          echo "‚ùå Deployment failed: app.yaml not found"
          exit 1
        fi
        
        echo "‚úÖ Pre-deployment checks passed"

  # Deploy to App Engine
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: 
      - 'app'
      - 'deploy'
      - '--quiet'
      - '--promote'
      - '--stop-previous-version'
    env:
      - 'CLOUDSDK_APP_CLOUD_BUILD_TIMEOUT=1200'

  # Post-deployment verification
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the deployed URL
        APP_URL=$(gcloud app browse --no-launch-browser 2>/dev/null || echo "")
        
        if [ -n "$APP_URL" ]; then
          echo "‚úÖ Application deployed successfully"
          echo "üåê URL: $APP_URL"
          
          # Basic health check
          sleep 30
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è  Health check returned status: $HTTP_STATUS"
          fi
        else
          echo "‚ùå Failed to get application URL"
        fi

  # Cleanup
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Clean up old versions (keep last 3)
        gcloud app versions list --format="value(version.id)" --sort-by="~version.createTime" | tail -n +4 | xargs -r gcloud app versions delete --quiet || echo "No old versions to clean up"
        
        echo "üßπ Cleanup completed"

# Substitution variables (set these in Cloud Build triggers)
substitutions:
  _SUPABASE_PROJECT_ID: 'your-supabase-project-id'
  _SUPABASE_URL: 'https://your-project.supabase.co'
  _SUPABASE_ANON_KEY: 'your-supabase-anon-key'
  _ADMIN_EMAILS: 'admin@journai.com'

# Build timeout
timeout: '1800s'

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'